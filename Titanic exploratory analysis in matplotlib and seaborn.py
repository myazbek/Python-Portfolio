# -*- coding: utf-8 -*-
"""Titanic dataset exploratory analysis in matplotlib and seaborn

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k4v6ZdQLiSEIPdlPgjl8TKr7xyippK_X

#Titanic example

This code was developed during a lecture on data analytics. It was developed using lectures and the [Python for Data Science Handbook by Jake VanderPlas](https://jakevdp.github.io/PythonDataScienceHandbook/)
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt

titanic = sns.load_dataset('titanic')


titanic.head()

titanic.describe()

titanic_notna = titanic[titanic['age'].notna()]

female = titanic_notna[titanic_notna['sex'] == 'female']
male = titanic_notna[titanic_notna['sex'] == 'male']

fig, ax = plt.subplots()

scatter_f = ax.scatter('age', 'fare', marker = 'o', c = 'pclass',
                       label = 'female', cmap = 'Paired', alpha = .8,
                       data = female)
scatter_m = ax.scatter('age', 'fare', marker = '^', c ='pclass',
                       label = 'male', cmap = 'Paired', alpha = .8,
                       data = male)

plt.title("Titanic graph")
ax.set(xlabel = 'Age', ylabel = 'Fare')
ax.legend(*scatter_f.legend_elements())

plt.show()

"""males are triangles, females squares, we dont get a whole of whats happening here.

#Matplotlob Intro
"""

import matplotlib as mpl

import matplotlib.pyplot as plt

import numpy as np

import matplotlib.pyplot as plt
import numpy as np


x = np.linspace(0, 10, 100)

plt.plot(x, np.sin(x))
plt.plot(x, np.cos(x))

plt.show()

"""#Matplotlib basics scripts and styles

two commands:

%matplotlib notebook for interactive plots

%matplotlib inline for static images

#MPL Basics saving figures and interfaces

you can save the figures you create using the savefig() commad

fig.savefig('my_figure.png')

this will save the file as my_figure.png
"""

import matplotlib.pyplot as plt
import numpy as np
import matplotlib as mpl


x = np.linspace(0, 10, 100)

plt.plot(x, np.sin(x)) 
plt.plot(x, np.cos(x))

plt.show()


plt.savefig('my_figure.png')

#below is the matlab version

plt.plot([1, 2, 3, 4], [3, 4, 2,1])

#from the Python Data Science Handbook

plt.figure() #create plot figure

#create the first of two panels and set current axis
plt.subplot(2, 1, 1) #rows, columns, panel number
plt.plot(x, np.sin(x))


#create the second panel and set current axis
plt.subplot(2, 1, 2)
plt.plot(x, np.cos(x));

"""Alternatively, we will look at the object oriented approach

We'll create fig and ax intially
"""

fig, ax = plt.subplots()
ax.plot([1, 2, 3, 4], [3, 4, 2, 1])

#we will create a grid of plots
#ax will be an array of two axes objects
fig, ax = plt.subplots(2)

#call plot() method on appropriate object

ax[0].plot(x, np.sin(x))
ax[1].plot(x, np.cos(x));

"""The whole point of this is to understand the MATLAB style interface vs. object oriented approach. The key is that the former will NOT have any = signs as it is not assigning variables. """

fig, ax = plt.subplots()

x, y = [1, 2, 3, 4], [3, 4, 2, 1]

ax.plot(x,y)

plt.show()

"""#More Matplotlib Options


"""

import matplotlib.pyplot as plt
import numpy as np
import matplotlib as mpl


fig, ax = plt.subplots()
x, y = [1, 2, 3, 4],[2, 1, 3, 4]
ax.plot(x, y, 'tan')

ax.set_title("My figure")
ax.set_xlabel("X")
ax.set_ylabel("Y")

plt.xlim(0, 5)
plt.ylim(0, 5)

plt.grid(True)

plt.show()

x = [1, 2, 3, 4]
y = [3, 4, 2, 1]
a = [.5, 1.5, 2.5, 3.5]
b = [3.5, 1.5, .5, 2.5]

fig, ax = plt.subplots()

ax.plot(x, y, 'purple')

ax.plot(a, b, c = 'brown', ls = '-.') #ls changes line type! see below

plt.title("My figure")

plt.xlim(0,5)
plt.ylim(0,5)

plt.xlabel("X")
plt.ylabel("Y")
plt.grid(True)

plt.show()

"""we can also change tick marks!"""

x = [1, 2, 3, 4]
y = [3, 4, 2, 1]
a = [.5, 1.5, 2.5, 3.5]
b = [3.5, 1.5, .5, 2.5]

fig, ax = plt.subplots()

ax.plot(x, y, 'purple')

ax.plot(a, b, c = 'brown', ls = '-.') #ls changes line type! see below

plt.title("My figure")

plt.xlim(0,5)
plt.ylim(0,5)

plt.xlabel("X")
plt.ylabel("Y")
plt.grid(True)

plt.xticks([1, 2, 3])
plt.yticks([1, 4], ['Sad    1', 'Happy   4'])

plt.show()

"""So obviously the above graph is a poor example of what you should be doing, but it does show what you CAN be doing i.e. changing tick marks

[Matplotlib style sheet reference page](https://https://matplotlib.org/3.2.1/gallery/style_sheets/style_sheets_reference.html)

#Pie Charts
"""

import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
import pandas

titanic = sns.load_dataset('titanic')

titanic.head()

counts = titanic['pclass'].value_counts() #must use value_counts() on data first

counts

fig, ax = plt.subplots() #VERY quick pie chart

ax.pie(counts)

plt.show()

print(counts.index)

fig, ax = plt.subplots()

ax.pie(counts, labels = ['1st', '2nd', '3rd'])

plt.show()

fig, ax = plt.subplots()

ax.pie(counts, autopct = '%1.1f%%')

ax.pie(counts, labels = ['1st', '2nd', '3rd'])

ax.set_title("Titanic Class Breakdown")

plt.show()

"""#Scatterplots"""

import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
import pandas

titanic = sns.load_dataset('titanic')

titanic_notna = titanic[titanic['age'].notna()]

fig, ax = plt.subplots()

ax.scatter('age', 'fare', data = titanic_notna)

plt.show() #the relationship between age and fare

"""we are using notNA for age because if we didn't, it would give us a warning"""

female = titanic_notna[titanic_notna['sex'] == 'female']
male = titanic_notna[titanic_notna['sex'] == 'male']

fig, ax = plt.subplots()

scatter_f = ax.scatter('age', 'fare', marker = 'o', c = 'pclass',
                       label = 'female', cmap = 'Paired', alpha = .8,
                       data = female)

scatter_m = ax.scatter('age', 'fare', marker = '^', c = 'pclass',
                       label = 'male', cmap = 'Paired', alpha = .8,
                       data = male)

plt.title('Titanic graph')

plt.grid(True)

ax.set(xlabel = 'Age', ylabel = 'Fare')

ax.legend(*scatter_f.legend_elements()) #elements are the same for male and female
#so we just use one

plt.show()

plt.style.use('ggplot')

fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(
    2, 2, sharex=True, figsize=(10, 10))

scatter_fd = ax1.scatter('age', 'fare', c='pclass',
                         label='female', cmap='Paired', alpha=.8,
                         #markeredgecolor = 'black', markeredgewidth = 2,
                         data=female[female['survived'] == 0])

scatter_fs = ax2.scatter('age', 'fare', c='pclass',
                         label='female', cmap='Paired', alpha=.8,
                         #markeredgecolor = 'black', markeredgewidth = 2,
                         data=female[female['survived'] == 1])

scatter_md = ax3.scatter('age', 'fare', c='pclass',
                         label='male', cmap='Paired', alpha=.8,
                         #markeredgecolor = 'black', markeredgewidth = 2,
                         data=male[male['survived'] == 0])
 
scatter_ms = ax4.scatter('age', 'fare', c='pclass',
                         label='male', cmap='Paired', alpha=.8,
                         #markeredgecolor = 'black', markeredgewidth = 2,
                         data=male[male['survived'] == 1])
  
plt.suptitle('Titanic graphs', fontsize=30)

ax1.set(xlabel='Age', ylabel='Fare', title='Female Died')
ax2.set(xlabel='Age', ylabel='Fare', title='Female Survived')
ax3.set(xlabel='Age', ylabel='Fare', title='Male Died')
ax4.set(xlabel='Age', ylabel='Fare', title='Male Survived')

fig.legend(*scatter_fs.legend_elements())

plt.show()

"""#Seaborn Intro

Seaborn is a modern plotting system built on matplotlib, primarily for statistical visualizations

When using seaborn you must also import MPL
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns


dots = sns.load_dataset("dots")

palette = sns.color_palette("rocket_r")


sns.relplot(x='time', y='firing_rate', col='align',
            hue='choice', size='coherence', style='choice',
            facet_kws=dict(sharex=False,),
            kind='line', legend='full', data=dots)
plt.show()

"""# Exploratory analysis"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd

sns.load_dataset("titanic")

titanic.isnull().sum() #shows us the total of null values per category

titanic.corr()

"""If you look at correlation you can look at relationships"""

titanic.count() #total values

"""#object oriented approach reconsidered

figure- and axes-level functions
"""

fig, ax = plt.subplots()
sns.histplot(titanic['fare']);

"""This does not always work in seaborn"""

fig, ax = plt.subplots()

sns.catplot(x = 'pclass', y = 'age', data = titanic)

plt.show()

"""The second graph shows up but not the first one

#Histplot

like a histogram, but with more options
"""

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd

titanic = sns.load_dataset("titanic")

plt.grid(True)

sns.histplot(titanic['age'])
plt.show()

sns.histplot(titanic['fare'])

plt.grid(True)

plt.show()

sns.histplot(y = titanic['age'])

plt.grid(True)

plt.show()

sns.histplot(titanic['age'], kde = True)
plt.grid(True)
plt.show();

"""kde = Kernel density estimate (we don't need to know this right now."""

sns.histplot(titanic['age'], bins = 4)
plt.grid(True)
plt.show()

"""You can control the number of bins your data shows up in. The above example would be frowned upon in real life but normally when you are controlling bins you are using natural breaks in your data. """

sns.histplot(titanic, x ='age', y = 'fare',
             bins = 25)
plt.grid (True)

plt.show()

"""The darker the region the more observations there are. That means we had a lot of people between 20-30 who had a cheap fare. Hot spot analysis can be quick!"""

sns.histplot(titanic['age'].dropna(),
             stat = 'density',
             binwidth = 10,
             cumulative = True,
             kde = True,
             color = 'pink')

plt.grid(True)

plt.show()

sns.histplot(titanic['age'].dropna(),
             stat = 'density',
             #binwidth = 10,
             cumulative = True,
             kde = True,
             color = 'pink')

plt.grid(True)

plt.show()

"""#Barplots and Catplots"""

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd

titanic = sns.load_dataset("titanic")

ax = sns.barplot(x = 'pclass', y = 'age', data = titanic)

ax.set(xlabel='Class', ylabel='Age')

plt.show()

"""looking at class and age, but includes an error bar to show uncertainty. Trying to display slight distinctions between plots. Let's contrast this with catplots. stands for categorical plot"""

g = sns.catplot(x = 'pclass', y='age', data = titanic)
plt.grid(True)

"""Instead of just a bar, we see our actual values. """

g = sns.catplot(x = 'pclass', y='age', data = titanic, hue = 'sex')
plt.grid(True)

"""You can add multiple categorical variables. 2 kinds of cat bars """

sns.catplot(x = 'pclass', y='age', hue='sex', data = titanic, kind='bar')

sns.catplot(x = 'pclass', y='age', hue='sex', data = titanic)

plt.show()

"""Cat plot that is a violin plot incoming (looks like a vagina tbh)"""

g = sns.catplot(x = 'pclass', y='age', hue='sex', data = titanic, kind = 'violin')

"""#Boxplots"""

ax = sns.boxplot(x='pclass', y='age', data=titanic)

"""Displaying data in quartiles. Displays outliers."""

ax = sns.boxplot(x='pclass', y='age', hue = 'sex', data=titanic)

ax = sns.boxplot(data = titanic, orient = 'h')

"""#Scatterplots in Seaborn

Scatterplots are best used for numeric data (not ideal for categorical data)
"""

sns.scatterplot('age', 'fare', data=titanic)
plt.grid(True)

sns.scatterplot('pclass', 'age', data=titanic)

sns.scatterplot('age', 'fare', hue = 'pclass', data = titanic)

g = sns.FacetGrid(titanic, col = 'pclass')

g.map(sns.scatterplot, 'age', 'fare', palette="YlGnBu")

g.set_axis_labels("Age", "Fare")

g.fig.set_size_inches(10, 5)

plt.show()

"""FacetGrid lets you pass on what arguments you want to visualize.

Relplot is a type of scatter plot, allows for more customization
"""

g = sns.relplot('age', 'fare', col='pclass', data = titanic)

g.add_legend()
g.set_axis_labels("Age", "Fare")
g.fig.set_size_inches(10,5)

plt.show()

#not a whole lot of difference because the default is a scatterplot
#lets now add survivorship
g = sns.relplot('age', 'fare','survived', col='pclass', data = titanic)

g.add_legend()
g.set_axis_labels("Age", "Fare")
g.fig.set_size_inches(10,5)

plt.show()

"""Lets now look at a pairplot!"""

cont = titanic[['age', 'fare']]
sns.pairplot(cont);

"""Creates a histogram for each of these, and then looks at the relationship between the two. This is a nice easy way to look at your data :D The reason that the data is only age and fare, because if you pass something that is a categorical value it WILL NOT RUN."""
